class d{keyStates=new Map;keyButtonStates=new Map;constructor(){window.addEventListener("keydown",({key:t})=>this.keyStates.set(t,!0)),window.addEventListener("keyup",({key:t})=>this.keyStates.set(t,!1))}isKeyPressed(t){return this.keyStates.get(t)||!1}handleButtonState(t,e){let s=this.keyButtonStates.get(t);const r=this.isKeyPressed(t);return s||(s={pressed:!1,released:!1,held:0},this.keyButtonStates.set(t,s)),r?(s.held===0?s.pressed=!0:s.pressed=!1,s.held+=e,s.released=!1):(s.held>0?(s.released=!0,s.held=0):s.released=!1,s.pressed=!1),s}handleAnalogState(t,e,s){return{value:this.getAxisValue(t,e),held:s}}getInput(t){return{buttons:{A:this.handleButtonState("z",t),B:this.handleButtonState("x",t),X:this.handleButtonState("a",t),Y:this.handleButtonState("s",t),Start:this.handleButtonState(" ",t),Select:this.handleButtonState("Enter",t),L:this.handleButtonState("q",t),R:this.handleButtonState("e",t)},directions:{Up:this.handleButtonState("ArrowUp",t),Down:this.handleButtonState("ArrowDown",t),Left:this.handleButtonState("ArrowLeft",t),Right:this.handleButtonState("ArrowRight",t)},axes:{Horizontal:this.handleAnalogState("ArrowLeft","ArrowRight",t),Vertical:this.handleAnalogState("ArrowUp","ArrowDown",t)},shoulders:{LTrigger:this.handleButtonState("Q",t),RTrigger:this.handleButtonState("E",t)}}}getName(){return"keyboard"}getAxisValue(t,e){return(this.isKeyPressed(e)?1:0)-(this.isKeyPressed(t)?1:0)}isConnected(){return!0}}class l{gamepadIndex;connected=!1;buttonStates={};constructor(t){this.gamepadIndex=t,window.addEventListener("gamepadconnected",e=>{e.gamepad.index===this.gamepadIndex&&(this.connected=!0)}),window.addEventListener("gamepaddisconnected",e=>{e.gamepad.index===this.gamepadIndex&&(this.connected=!1)})}handleButtonState(t,e,s){const r=e.buttons[t].pressed;let n=this.buttonStates[t];return n||(n={pressed:!1,released:!1,held:0},this.buttonStates[t]=n),r?(n.held===0?n.pressed=!0:n.pressed=!1,n.held+=s,n.released=!1):(n.held>0?(n.released=!0,n.held=0):n.released=!1,n.pressed=!1),n}handleAnalogState(t,e,s){return{value:e.axes[t],held:s}}getInput(t){const e=navigator.getGamepads()[this.gamepadIndex];return e?{buttons:{A:this.handleButtonState(0,e,t),B:this.handleButtonState(1,e,t),X:this.handleButtonState(2,e,t),Y:this.handleButtonState(3,e,t),Start:this.handleButtonState(9,e,t),Select:this.handleButtonState(8,e,t),L:this.handleButtonState(4,e,t),R:this.handleButtonState(5,e,t)},directions:{Up:this.handleButtonState(12,e,t),Down:this.handleButtonState(13,e,t),Left:this.handleButtonState(14,e,t),Right:this.handleButtonState(15,e,t)},axes:{Horizontal:this.handleAnalogState(0,e,t),Vertical:this.handleAnalogState(1,e,t)},shoulders:{LTrigger:this.handleButtonState(6,e,t),RTrigger:this.handleButtonState(7,e,t)}}:{}}getName(){return`gamepad-${this.gamepadIndex+1}`}isConnected(){return this.connected}}class g{inputMap=new Map;currentInputs={};previousInputs={};constructor(){this.addInputProvider(1,new d),this.addInputProvider(1,new l(0))}addInputProvider(t,e){this.inputMap.has(t)||this.inputMap.set(t,[]),this.inputMap.get(t)?.push(e)}getInputs(t){const e={};return this.inputMap.forEach((s,r)=>{const n=`p${r}`,i=s.reduce((o,h)=>{const u=h.getInput(t);return this.mergeInputs(o,u)},{});e[n]={playerNumber:r,...i}}),e}mergeButtonState(t,e){return{pressed:t?.pressed||e?.pressed||!1,released:t?.released||e?.released||!1,held:(t?.held||0)+(e?.held||0)}}mergeAnalogState(t,e){return{value:(t?.value||0)+(e?.value||0),held:(t?.held||0)+(e?.held||0)}}mergeInputs(t,e){return{buttons:{A:this.mergeButtonState(t.buttons?.A,e.buttons?.A),B:this.mergeButtonState(t.buttons?.B,e.buttons?.B),X:this.mergeButtonState(t.buttons?.X,e.buttons?.X),Y:this.mergeButtonState(t.buttons?.Y,e.buttons?.Y),Start:this.mergeButtonState(t.buttons?.Start,e.buttons?.Start),Select:this.mergeButtonState(t.buttons?.Select,e.buttons?.Select),L:this.mergeButtonState(t.buttons?.L,e.buttons?.L),R:this.mergeButtonState(t.buttons?.R,e.buttons?.R)},directions:{Up:this.mergeButtonState(t.directions?.Up,e.directions?.Up),Down:this.mergeButtonState(t.directions?.Down,e.directions?.Down),Left:this.mergeButtonState(t.directions?.Left,e.directions?.Left),Right:this.mergeButtonState(t.directions?.Right,e.directions?.Right)},axes:{Horizontal:this.mergeAnalogState(t.axes?.Horizontal,e.axes?.Horizontal),Vertical:this.mergeAnalogState(t.axes?.Vertical,e.axes?.Vertical)},shoulders:{LTrigger:this.mergeButtonState(t.shoulders?.LTrigger,e.shoulders?.LTrigger),RTrigger:this.mergeButtonState(t.shoulders?.RTrigger,e.shoulders?.RTrigger)}}}}export{g as I};

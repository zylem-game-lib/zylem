import { Game } from './game';
import { UpdateContext, SetupContext, DestroyContext } from '../core/base-node-life-cycle';
import { InputManager } from '../input/input-manager';
import { Timer } from '../core/three-addons/Timer';
import { Stage } from '../stage/stage';
import { BasicTypes, GlobalVariablesType, ZylemGameConfig } from './game-interfaces';
export declare class ZylemGame {
    id: string;
    initialGlobals: GlobalVariablesType;
    customSetup: ((params: SetupContext<ZylemGame>) => void) | null;
    customUpdate: ((params: UpdateContext<ZylemGame>) => void) | null;
    customDestroy: ((params: DestroyContext<ZylemGame>) => void) | null;
    stages: Stage[];
    stageMap: Map<string, Stage>;
    currentStageId: string;
    previousTimeStamp: number;
    totalTime: number;
    timer: Timer;
    inputManager: InputManager;
    wrapperRef: Game;
    static FRAME_LIMIT: number;
    static FRAME_DURATION: number;
    constructor(options: ZylemGameConfig<Stage, ZylemGame>, wrapperRef: Game);
    loadStage(stage: Stage): Promise<void>;
    setGlobals(options: ZylemGameConfig<Stage, ZylemGame>): void;
    params(): UpdateContext<ZylemGame>;
    start(): void;
    loop(timestamp: number): void;
    getStage(id: string): Stage | undefined;
    currentStage(): Stage | undefined;
    getGlobal(key: string): BasicTypes | GlobalVariablesType;
    setGlobal(key: string, value: BasicTypes): void;
}
export default ZylemGame;
